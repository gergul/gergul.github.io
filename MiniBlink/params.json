{
  "name": "Miniblink",
  "tagline": "史上最小巧的chromium内核：miniblink",
  "body": "### miniblink是什么？\r\n\r\nMiniblink是一个全新的、追求极致小巧的浏览器内核项目，\r\n其基于chromium最新版内核，去除了chromium所有多余的部件，只保留最基本的排版引擎blink。\r\nMiniblink保持了10M左右的极简大小，是所有同类产品最小的体积，同时支持windows xp、npapi。\r\n\r\n### 为什么要做miniblink？\r\n\r\n市面上作为嵌入的组件的可用的浏览器内核，不外乎这几个：webkit、cef、nwjs、electron。\r\n\r\ncef：优点是由于集成的chromium内核，所以对H5支持的很全，同时因为使用的人也多，各种教程、示例，资源很多。但缺点很明显，太大了。最新的cef已经夸张到了100多M，还要带一堆的文件。同时新的cef已经不支持xp了（chromium对应版本是M49）。而且由于是多进程架构，对资源的消耗也很夸张。如果只是想做个小软件，一坨文件需要带上、超大的安装包，显然不能忍受。\r\n\r\nnwjs，或者最近大火的electron：和cef内核类似，都是chromium内核。缺点和cef一模一样。优点是由于可以使用nodejs的资源，同时又自带了各种api的绑定，所以可以用的周边资源非常丰富；而基于js的开发方案，使得前端很容易上手。所以最近N多项目都是基于nwjs或electron来实现。例如vscode，atom等等。\r\n\r\n原版webkit：现在官网还在更新windows port，但显然漫不在心，而且最新的webkit也很大了，超过20几M。最关键的是，周边资源很少，几乎没人再基于webkit来做开发。同时由于windows版的saferi已经停止开发了，所以用webkit就用不了他的dev tools了。这是个大遗憾。\r\n\r\nWKE：这是个很老的webkit内核的裁剪版了。小是小，但bug太多了。\r\n\r\n### 那么关键点来了，使用miniblink有啥好处呢？？\r\n\r\n首先，miniblink对大小要求非常严格。原版chromium、blink里对排版渲染没啥大用的如音视频全都被砍了，只专注于网页的排版和渲染。甚至为了裁剪大小，我不惜使用vc6的crt来跑mininblink(见我上篇文章)。这个也算前无古人后无来者了。\r\n\r\n其次，miniblink紧跟最新chromium，这意味着chromium相关的资源都可以利用。在未来的规划里，我是打算把electron的接口也加上的，这样可以无缝替换electron。使用miniblink的话，开发调试时用原版electron，发布的时候再替换掉那些dll，直接可以无缝切换，非常方便。\r\n\r\n### miniblink如何使用？\r\n\r\nMiniblink导出了CEF、WKE的接口，可以直接无缝替换现有的CEF、WKE项目。\r\n同时，正在开发electron的接口，大家拭目以待。\r\n\r\n目前miniblink放出了一个小demo，从demo里可以看到，brackct这个基于cef的开源编辑器，已经顺利由miniblink跑起来了。未来如果electron的接口做好，把vscode跑起来，那就屌炸天了。\r\n\r\n### miniblink如何裁剪到这么小？\r\n\r\n这个比较复杂了。主要就是把blink从chromium抽离了出来，同时补上了cc层（硬件渲染层）。现在的blink，已经不是当年的那个webkit了，渲染部分全走cc层，复杂无比。我这大半年都在重写他那个蛋疼又复杂的cc层。\r\n\r\n### 和webkit比，miniblink架构有什么优势\r\n\r\n现在的webkit版本，已经比miniblink落后太多了。blink一直在加入各种极富创造力和想象力的功能、组件。例如，blink早就加入多线程解析html token、blink gc回收器、多线程录制回放渲染机制。这些能让blink的解析渲染速度极大提升。下一次，我会先开源出blink gc组件，这东西很有意思，在c++里硬是搞出了一个垃圾回收机制，能让你像写java一样写c++。\r\n\r\n### miniblink是开源的吗？\r\n\r\n是的，已经开源在github了。见https://github.com/weolar/miniblink49。\r\n一个成熟的产品，需要更多人去测试和使用，虽然我完全不指望会有人给我提代码。。\r\n\r\nminiblink还在开发中，目前还是内测版。我会持续维护这个项目的，我相信，这个才是此项目最有价值的地方\r\n\r\n博客地址：http://blog.csdn.net/weolar/article/details/51447704",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}